{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject } from \"rxjs\";\nimport { combineLatest } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nlet AppComponent = class AppComponent {\n  constructor(todoService) {\n    this.todoService = todoService;\n    this.searchTermSubject = new BehaviorSubject('');\n    this.errorMessage = null; //error message for failed delete\n\n    this.todos$ = todoService.getAll();\n    this.filteredTodos$ = combineLatest([this.todos$, this.searchTermSubject]).pipe(map(([todos, searchTerm]) => todos.filter(todo => todo.task.toLowerCase().includes(searchTerm.toLowerCase()))));\n  }\n\n  onSearch(searchTerm) {\n    this.searchTermSubject.next(searchTerm);\n  }\n\n  deleteTodo(id) {\n    this.todoService.remove(id).subscribe({\n      next: () => {\n        this.errorMessage = null; // Clear error message on success\n      },\n      error: () => {\n        this.errorMessage = `Failed to delete TODO with id ${id}. Please try again.`;\n      }\n    });\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"title\">\n      <h1>\n        A list of TODOs\n      </h1>\n    </div>\n    <div class=\"list\">\n      <label for=\"search\">Search...</label>\n        <input id=\"search\" type=\"text\" (input)=\"onSearch($any($event.target).value)\">\n      <app-progress-bar></app-progress-bar>\n      <app-todo-item *ngFor=\"let todo of filteredTodos$ | async\" [item]=\"todo\"></app-todo-item (delete)=\"deleteTodo($event)\">\n    </div>\n  `,\n  styleUrls: ['app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"sources":["/Users/alina/__all_data/CERN/todo-list/todo-list-frontend/src/app/app.component.ts"],"names":["__decorate","Component","BehaviorSubject","combineLatest","map","AppComponent","constructor","todoService","searchTermSubject","errorMessage","todos$","getAll","filteredTodos$","pipe","todos","searchTerm","filter","todo","task","toLowerCase","includes","onSearch","next","deleteTodo","id","remove","subscribe","error","selector","template","styleUrls"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,eAAT,QAAgC,MAAhC;AACA,SAASC,aAAT,QAA8B,MAA9B;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,IAAIC,YAAY,GAAG,MAAMA,YAAN,CAAmB;AAClCC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,iBAAL,GAAyB,IAAIN,eAAJ,CAAoB,EAApB,CAAzB;AACA,SAAKO,YAAL,GAAoB,IAApB,CAHqB,CAGK;;AAC1B,SAAKC,MAAL,GAAcH,WAAW,CAACI,MAAZ,EAAd;AACA,SAAKC,cAAL,GAAsBT,aAAa,CAAC,CAAC,KAAKO,MAAN,EAAc,KAAKF,iBAAnB,CAAD,CAAb,CAAqDK,IAArD,CAA0DT,GAAG,CAAC,CAAC,CAACU,KAAD,EAAQC,UAAR,CAAD,KAAyBD,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCL,UAAU,CAACI,WAAX,EAAjC,CAArB,CAA1B,CAA7D,CAAtB;AACH;;AACDE,EAAAA,QAAQ,CAACN,UAAD,EAAa;AACjB,SAAKP,iBAAL,CAAuBc,IAAvB,CAA4BP,UAA5B;AACH;;AACDQ,EAAAA,UAAU,CAACC,EAAD,EAAK;AACX,SAAKjB,WAAL,CAAiBkB,MAAjB,CAAwBD,EAAxB,EAA4BE,SAA5B,CAAsC;AAClCJ,MAAAA,IAAI,EAAE,MAAM;AACR,aAAKb,YAAL,GAAoB,IAApB,CADQ,CACkB;AAC7B,OAHiC;AAIlCkB,MAAAA,KAAK,EAAE,MAAM;AACT,aAAKlB,YAAL,GAAqB,iCAAgCe,EAAG,qBAAxD;AACH;AANiC,KAAtC;AAQH;;AApBiC,CAAtC;AAsBAnB,YAAY,GAAGL,UAAU,CAAC,CACtBC,SAAS,CAAC;AACN2B,EAAAA,QAAQ,EAAE,UADJ;AAENC,EAAAA,QAAQ,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdc;AAeNC,EAAAA,SAAS,EAAE,CAAC,oBAAD;AAfL,CAAD,CADa,CAAD,EAkBtBzB,YAlBsB,CAAzB;AAmBA,SAASA,YAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject } from \"rxjs\";\nimport { combineLatest } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nlet AppComponent = class AppComponent {\n    constructor(todoService) {\n        this.todoService = todoService;\n        this.searchTermSubject = new BehaviorSubject('');\n        this.errorMessage = null; //error message for failed delete\n        this.todos$ = todoService.getAll();\n        this.filteredTodos$ = combineLatest([this.todos$, this.searchTermSubject]).pipe(map(([todos, searchTerm]) => todos.filter(todo => todo.task.toLowerCase().includes(searchTerm.toLowerCase()))));\n    }\n    onSearch(searchTerm) {\n        this.searchTermSubject.next(searchTerm);\n    }\n    deleteTodo(id) {\n        this.todoService.remove(id).subscribe({\n            next: () => {\n                this.errorMessage = null; // Clear error message on success\n            },\n            error: () => {\n                this.errorMessage = `Failed to delete TODO with id ${id}. Please try again.`;\n            }\n        });\n    }\n};\nAppComponent = __decorate([\n    Component({\n        selector: 'app-root',\n        template: `\n    <div class=\"title\">\n      <h1>\n        A list of TODOs\n      </h1>\n    </div>\n    <div class=\"list\">\n      <label for=\"search\">Search...</label>\n        <input id=\"search\" type=\"text\" (input)=\"onSearch($any($event.target).value)\">\n      <app-progress-bar></app-progress-bar>\n      <app-todo-item *ngFor=\"let todo of filteredTodos$ | async\" [item]=\"todo\"></app-todo-item (delete)=\"deleteTodo($event)\">\n    </div>\n  `,\n        styleUrls: ['app.component.scss']\n    })\n], AppComponent);\nexport { AppComponent };\n"]},"metadata":{},"sourceType":"module"}